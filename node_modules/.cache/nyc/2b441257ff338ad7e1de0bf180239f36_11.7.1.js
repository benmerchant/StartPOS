const express = require('express');
const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;

const EmployeeController = require('./controllers/employee.controller');
const RoleController = require('./controllers/role.controller');
const RestaurantController = require('./controllers/restaurant.controller');

module.exports = function(app){
  // route groups
  const apiRoutes = express.Router();
  const employeeRoutes = express.Router();
  const roleRoutes = express.Router();
  const restaurantRoutes = express.Router();
  const loginRoutes = express.Router();

  // employee routes middleware for apiRoutes
  apiRoutes.use('/employees', employeeRoutes);
  apiRoutes.use('/roles', roleRoutes);
  apiRoutes.use('/restaurant', restaurantRoutes);
  apiRoutes.use('/login', loginRoutes);


  /////////////////////////////////////////
  // // strategy must come before login POST request
  passport.use(new LocalStrategy({
    // rename fields
    // By default, LocalStrategy expects to find credentials in parameters named
    // username and password. If your site prefers to name these fields differently,
    // options are available to change the defaults.
    // passwordField: 'password'
    usernameField: 'email'
  },
    function(email, password, done){
      // 2: working to here so far
      console.log('hey 2');
      Employee.findOne({email: email}, function(err,user){
        // 4: working here so far
        console.log('hey 4');
        if(err) return done(err);
        // if there is no username match
        if(!user){
          // 5: working here so far
          console.log('hey 5 - OR: email not in DB');
          return done(null, false, {message: 'email not in DB.'});
        }
        // continue if there is an employee match
        console.log('hey 5 - OR: found employee');
        // user.password is the hashed password from the DB
        // remember, user is just the session global variable
        Employee.comparePassword(password, user.password, function(err, isMatch){
          if(err) throw err;
          if(isMatch){
            console.log('hey 7 - OR: passwords match');
            return done(null, user);
          } else {
            console.log('hey 7 - OR: passwords dont match');
            return done(null, false, {message: 'Incorrect password'});
          } // BOOM FrickALOOOOOOOOM!!!!! it all works

        });
      });

    }));

  // serialize and deserialize
  passport.serializeUser(function(user, done){
    // user is a session variable
    done(null, user.id);
  });
  passport.deserializeUser(function(id, done){
    // create this funcgion inside the model

    Employee.getEmployeeById(id, function(err, user){
      done(err, user);
    });
  });
  //////////////////////////////////////////////



  /// Employee Routes /////////////////////
  // get all employees
  employeeRoutes.get('/', EmployeeController.getEmployees);
  // create new employee
  employeeRoutes.post('/', EmployeeController.createEmployee);
  // get employee by _id
  employeeRoutes.get('/:id', EmployeeController.getOneEmployee);
  // update an employee
  employeeRoutes.put('/:id', EmployeeController.updateEmployee);
  // delete an employee
  employeeRoutes.delete('/:id', EmployeeController.deleteEmployee);
  // update employee - assign role by id
  employeeRoutes.put('/:id/assignrole/:role_id', EmployeeController.assignRole);

  // / Login Routes /////////////////////
  loginRoutes.post('/', passport.authenticate('local', {
    // successRedirect: '/login/login_success',
    failureRedirect: '/api/login/login_error', // 1: working to here so far (changed route to test)
    failureFlash: false
  }),
  (req,res) => {
    // if this function gets called, authentication was Successful
    // 'req.employee' contains the autenticated user
    // res.redirect('/');
    console.log(req.body);
    console.log(req.user);
    res.redirect('/api/login/login_success');
    // return res.status(200).json({msg: 'Employee successfully logged in'});
  });)
  // GET employee login success
  loginRoutes.get('/login_success', EmployeeController.loginSuccess);
  // POST employee login success
  loginRoutes.get('/login_error', EmployeeController.loginError);

  /// Role Routes /////////////////////
  // get all roles
  roleRoutes.get('/', RoleController.getRoles);
  // create new role
  roleRoutes.post('/', RoleController.createRole);
  // get one role by _id
  roleRoutes.get('/:id', RoleController.getOneRole);
  // delete one role by _id
  roleRoutes.delete('/:id', RoleController.deleteRole);

  /// Restaurant Routes /////////////////////
  // GET restaurant document
  restaurantRoutes.get('/', RestaurantController.getRestaurant);
  // create new restaurant
  restaurantRoutes.post('/', RestaurantController.createRestaurant);
  // update restaurant hours
  restaurantRoutes.put('/:id', RestaurantController.updateRestaurant);

  // url for all API routes
  app.use('/api', apiRoutes);
};
