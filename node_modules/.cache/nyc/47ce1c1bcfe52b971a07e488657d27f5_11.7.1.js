"use strict";var cov_1qb7vetiqt=function(){var path='Y:\\startpos\\app\\controllers\\employee.controller.js',hash='514bbb925b5fb84c29211c4fe3917444184122d8',Function=function(){}.constructor,global=new Function('return this')(),gcv='__coverage__',coverageData={path:'Y:\\startpos\\app\\controllers\\employee.controller.js',statementMap:{'0':{start:{line:2,column:17},end:{line:2,column:46}},'1':{start:{line:3,column:13},end:{line:3,column:38}},'2':{start:{line:4,column:15},end:{line:4,column:34}},'3':{start:{line:5,column:36},end:{line:5,column:70}},'4':{start:{line:6,column:34},end:{line:6,column:69}},'5':{start:{line:7,column:17},end:{line:7,column:36}},'6':{start:{line:8,column:22},end:{line:8,column:56}},'7':{start:{line:11,column:0},end:{line:20,column:2}},'8':{start:{line:12,column:2},end:{line:19,column:5}},'9':{start:{line:13,column:4},end:{line:16,column:5}},'10':{start:{line:14,column:6},end:{line:14,column:40}},'11':{start:{line:15,column:6},end:{line:15,column:23}},'12':{start:{line:17,column:4},end:{line:17,column:56}},'13':{start:{line:18,column:4},end:{line:18,column:18}},'14':{start:{line:23,column:0},end:{line:60,column:2}},'15':{start:{line:34,column:19},end:{line:34,column:40}},'16':{start:{line:35,column:4},end:{line:37,column:5}},'17':{start:{line:36,column:6},end:{line:36,column:61}},'18':{start:{line:38,column:24},end:{line:38,column:40}},'19':{start:{line:39,column:24},end:{line:39,column:46}},'20':{start:{line:41,column:4},end:{line:41,column:48}},'21':{start:{line:42,column:4},end:{line:42,column:93}},'22':{start:{line:45,column:4},end:{line:58,column:7}},'23':{start:{line:46,column:6},end:{line:57,column:9}},'24':{start:{line:47,column:8},end:{line:47,column:36}},'25':{start:{line:48,column:8},end:{line:56,column:11}},'26':{start:{line:49,column:10},end:{line:55,column:11}},'27':{start:{line:51,column:12},end:{line:51,column:46}},'28':{start:{line:52,column:12},end:{line:52,column:29}},'29':{start:{line:54,column:12},end:{line:54,column:98}},'30':{start:{line:63,column:0},end:{line:68,column:2}},'31':{start:{line:64,column:2},end:{line:67,column:5}},'32':{start:{line:65,column:4},end:{line:66,column:95}},'33':{start:{line:65,column:12},end:{line:65,column:47}},'34':{start:{line:66,column:9},end:{line:66,column:95}},'35':{start:{line:71,column:0},end:{line:81,column:2}},'36':{start:{line:72,column:2},end:{line:80,column:4}},'37':{start:{line:77,column:6},end:{line:78,column:99}},'38':{start:{line:77,column:14},end:{line:77,column:49}},'39':{start:{line:78,column:11},end:{line:78,column:99}},'40':{start:{line:86,column:0},end:{line:108,column:2}},'41':{start:{line:87,column:2},end:{line:107,column:5}},'42':{start:{line:91,column:20},end:{line:97,column:5}},'43':{start:{line:98,column:4},end:{line:106,column:6}},'44':{start:{line:103,column:8},end:{line:104,column:103}},'45':{start:{line:103,column:16},end:{line:103,column:51}},'46':{start:{line:104,column:13},end:{line:104,column:103}},'47':{start:{line:111,column:0},end:{line:116,column:2}},'48':{start:{line:112,column:2},end:{line:115,column:5}},'49':{start:{line:113,column:4},end:{line:114,column:85}},'50':{start:{line:113,column:12},end:{line:113,column:47}},'51':{start:{line:114,column:9},end:{line:114,column:85}},'52':{start:{line:119,column:0},end:{line:121,column:2}},'53':{start:{line:120,column:2},end:{line:120,column:72}},'54':{start:{line:123,column:0},end:{line:125,column:2}},'55':{start:{line:124,column:2},end:{line:124,column:62}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:11,column:23},end:{line:11,column:24}},loc:{start:{line:11,column:43},end:{line:20,column:1}},line:11},'1':{name:'(anonymous_1)',decl:{start:{line:12,column:25},end:{line:12,column:26}},loc:{start:{line:12,column:45},end:{line:19,column:3}},line:12},'2':{name:'(anonymous_2)',decl:{start:{line:33,column:2},end:{line:33,column:3}},loc:{start:{line:33,column:22},end:{line:59,column:3}},line:33},'3':{name:'(anonymous_3)',decl:{start:{line:45,column:23},end:{line:45,column:24}},loc:{start:{line:45,column:38},end:{line:58,column:5}},line:45},'4':{name:'(anonymous_4)',decl:{start:{line:46,column:46},end:{line:46,column:47}},loc:{start:{line:46,column:61},end:{line:57,column:7}},line:46},'5':{name:'(anonymous_5)',decl:{start:{line:48,column:25},end:{line:48,column:26}},loc:{start:{line:48,column:44},end:{line:56,column:9}},line:48},'6':{name:'(anonymous_6)',decl:{start:{line:63,column:25},end:{line:63,column:26}},loc:{start:{line:63,column:45},end:{line:68,column:1}},line:63},'7':{name:'(anonymous_7)',decl:{start:{line:64,column:35},end:{line:64,column:36}},loc:{start:{line:64,column:54},end:{line:67,column:3}},line:64},'8':{name:'(anonymous_8)',decl:{start:{line:71,column:25},end:{line:71,column:26}},loc:{start:{line:71,column:45},end:{line:81,column:1}},line:71},'9':{name:'(anonymous_9)',decl:{start:{line:76,column:4},end:{line:76,column:5}},loc:{start:{line:76,column:23},end:{line:79,column:5}},line:76},'10':{name:'(anonymous_10)',decl:{start:{line:86,column:21},end:{line:86,column:22}},loc:{start:{line:86,column:39},end:{line:108,column:1}},line:86},'11':{name:'(anonymous_11)',decl:{start:{line:87,column:36},end:{line:87,column:37}},loc:{start:{line:87,column:51},end:{line:107,column:3}},line:87},'12':{name:'(anonymous_12)',decl:{start:{line:102,column:6},end:{line:102,column:7}},loc:{start:{line:102,column:25},end:{line:105,column:7}},line:102},'13':{name:'(anonymous_13)',decl:{start:{line:111,column:25},end:{line:111,column:26}},loc:{start:{line:111,column:45},end:{line:116,column:1}},line:111},'14':{name:'(anonymous_14)',decl:{start:{line:112,column:40},end:{line:112,column:41}},loc:{start:{line:112,column:57},end:{line:115,column:3}},line:112},'15':{name:'(anonymous_15)',decl:{start:{line:119,column:23},end:{line:119,column:24}},loc:{start:{line:119,column:37},end:{line:121,column:1}},line:119},'16':{name:'(anonymous_16)',decl:{start:{line:123,column:21},end:{line:123,column:22}},loc:{start:{line:123,column:35},end:{line:125,column:1}},line:123}},branchMap:{'0':{loc:{start:{line:13,column:4},end:{line:16,column:5}},type:'if',locations:[{start:{line:13,column:4},end:{line:16,column:5}},{start:{line:13,column:4},end:{line:16,column:5}}],line:13},'1':{loc:{start:{line:35,column:4},end:{line:37,column:5}},type:'if',locations:[{start:{line:35,column:4},end:{line:37,column:5}},{start:{line:35,column:4},end:{line:37,column:5}}],line:35},'2':{loc:{start:{line:49,column:10},end:{line:55,column:11}},type:'if',locations:[{start:{line:49,column:10},end:{line:55,column:11}},{start:{line:49,column:10},end:{line:55,column:11}}],line:49},'3':{loc:{start:{line:65,column:4},end:{line:66,column:95}},type:'if',locations:[{start:{line:65,column:4},end:{line:66,column:95}},{start:{line:65,column:4},end:{line:66,column:95}}],line:65},'4':{loc:{start:{line:77,column:6},end:{line:78,column:99}},type:'if',locations:[{start:{line:77,column:6},end:{line:78,column:99}},{start:{line:77,column:6},end:{line:78,column:99}}],line:77},'5':{loc:{start:{line:95,column:20},end:{line:95,column:62}},type:'binary-expr',locations:[{start:{line:95,column:20},end:{line:95,column:41}},{start:{line:95,column:45},end:{line:95,column:62}}],line:95},'6':{loc:{start:{line:96,column:27},end:{line:96,column:81}},type:'binary-expr',locations:[{start:{line:96,column:27},end:{line:96,column:54}},{start:{line:96,column:58},end:{line:96,column:81}}],line:96},'7':{loc:{start:{line:103,column:8},end:{line:104,column:103}},type:'if',locations:[{start:{line:103,column:8},end:{line:104,column:103}},{start:{line:103,column:8},end:{line:104,column:103}}],line:103},'8':{loc:{start:{line:113,column:4},end:{line:114,column:85}},type:'if',locations:[{start:{line:113,column:4},end:{line:114,column:85}},{start:{line:113,column:4},end:{line:114,column:85}}],line:113}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0,'34':0,'35':0,'36':0,'37':0,'38':0,'39':0,'40':0,'41':0,'42':0,'43':0,'44':0,'45':0,'46':0,'47':0,'48':0,'49':0,'50':0,'51':0,'52':0,'53':0,'54':0,'55':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0},b:{'0':[0,0],'1':[0,0],'2':[0,0],'3':[0,0],'4':[0,0],'5':[0,0],'6':[0,0],'7':[0,0],'8':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const Employee=(cov_1qb7vetiqt.s[0]++,require('../models/employee'));const Role=(cov_1qb7vetiqt.s[1]++,require('../models/role'));const bcrypt=(cov_1qb7vetiqt.s[2]++,require('bcryptjs'));const{check,validationResult}=(cov_1qb7vetiqt.s[3]++,require('express-validator/check'));const{matchedData,sanitize}=(cov_1qb7vetiqt.s[4]++,require('express-validator/filter'));const passport=(cov_1qb7vetiqt.s[5]++,require('passport'));const LocalStrategy=(cov_1qb7vetiqt.s[6]++,require('passport-local').Strategy);// GET all the employees
cov_1qb7vetiqt.s[7]++;exports.getEmployees=(req,res,next)=>{cov_1qb7vetiqt.f[0]++;cov_1qb7vetiqt.s[8]++;Employee.find({}).exec((err,employees)=>{cov_1qb7vetiqt.f[1]++;cov_1qb7vetiqt.s[9]++;if(err){cov_1qb7vetiqt.b[0][0]++;cov_1qb7vetiqt.s[10]++;res.status(500).json({error:err});cov_1qb7vetiqt.s[11]++;return next(err);}else{cov_1qb7vetiqt.b[0][1]++;}cov_1qb7vetiqt.s[12]++;return res.status(200).json({employees:employees});cov_1qb7vetiqt.s[13]++;return next();});};// POST create a new employee
cov_1qb7vetiqt.s[14]++;exports.createEmployee=[// validate req.body
// only testing password because it doesn't make sense to validate the hashed password in mongoose Schema
check('password').isLength({min:8}).withMessage('Password must be at least 8 characters').isLength({max:24}).withMessage('Password must be no more than characters'),// have to check last name here so that we can ensure display_name wont attempt
// substring() on undefined
check('last_name').exists().withMessage('Must enter a last name'),(req,res,next)=>{cov_1qb7vetiqt.f[2]++;const errors=(cov_1qb7vetiqt.s[15]++,validationResult(req));cov_1qb7vetiqt.s[16]++;if(!errors.isEmpty()){cov_1qb7vetiqt.b[1][0]++;cov_1qb7vetiqt.s[17]++;return res.status(422).json({errors:errors.mapped()});}else{cov_1qb7vetiqt.b[1][1]++;}const checkedData=(cov_1qb7vetiqt.s[18]++,matchedData(req));const newEmployee=(cov_1qb7vetiqt.s[19]++,new Employee(req.body));// this is the only field we're checking with express-validator
cov_1qb7vetiqt.s[20]++;newEmployee.password=checkedData.password;cov_1qb7vetiqt.s[21]++;newEmployee.display_name=`${req.body.first_name} ${req.body.last_name.substring(0,1)}`;cov_1qb7vetiqt.s[22]++;bcrypt.genSalt(10,(err,salt)=>{cov_1qb7vetiqt.f[3]++;cov_1qb7vetiqt.s[23]++;bcrypt.hash(newEmployee.password,salt,(err,hash)=>{cov_1qb7vetiqt.f[4]++;cov_1qb7vetiqt.s[24]++;newEmployee.password=hash;cov_1qb7vetiqt.s[25]++;newEmployee.save((err,employee)=>{cov_1qb7vetiqt.f[5]++;cov_1qb7vetiqt.s[26]++;if(err){cov_1qb7vetiqt.b[2][0]++;cov_1qb7vetiqt.s[27]++;// console.error(err);
res.status(500).json({error:err});cov_1qb7vetiqt.s[28]++;return next(err);}else{cov_1qb7vetiqt.b[2][1]++;cov_1qb7vetiqt.s[29]++;return res.status(200).json({msg:'Employee successfully added',employee:employee});}});});});}];// GET one employee by _id
cov_1qb7vetiqt.s[30]++;exports.getOneEmployee=(req,res,next)=>{cov_1qb7vetiqt.f[6]++;cov_1qb7vetiqt.s[31]++;Employee.findById(req.params.id,(err,employee)=>{cov_1qb7vetiqt.f[7]++;cov_1qb7vetiqt.s[32]++;if(err){cov_1qb7vetiqt.b[3][0]++;cov_1qb7vetiqt.s[33]++;res.status(500).json({error:err});}else{cov_1qb7vetiqt.b[3][1]++;cov_1qb7vetiqt.s[34]++;return res.status(200).json({msg:'Successfully found employee',employee:employee});}});};// PUT update one employee by _id
cov_1qb7vetiqt.s[35]++;exports.updateEmployee=(req,res,next)=>{cov_1qb7vetiqt.f[8]++;cov_1qb7vetiqt.s[36]++;Employee.findByIdAndUpdate(req.params.id,req.body,{new:true},(err,employee)=>{cov_1qb7vetiqt.f[9]++;cov_1qb7vetiqt.s[37]++;if(err){cov_1qb7vetiqt.b[4][0]++;cov_1qb7vetiqt.s[38]++;res.status(422).json({error:err});}else{cov_1qb7vetiqt.b[4][1]++;cov_1qb7vetiqt.s[39]++;return res.status(200).json({msg:'Successfully updated employee',employee:employee});}});};// PUT - assign role to employee
// accepts params of employee id and role id
// searches db for the role and creates new object to push to employee.roles array
cov_1qb7vetiqt.s[40]++;exports.assignRole=(req,res,next)=>{cov_1qb7vetiqt.f[10]++;cov_1qb7vetiqt.s[41]++;Role.findById(req.params.role_id,(err,role)=>{cov_1qb7vetiqt.f[11]++;// check if the req.body has different values for certain fields
// if so assign those, if not, fall back to the values stored in the
// db for the role model
const newRole=(cov_1qb7vetiqt.s[42]++,{_id:role._id,name:role.name,salaried:role.salaried,rate_of_pay:(cov_1qb7vetiqt.b[5][0]++,req.body.granular_pay)||(cov_1qb7vetiqt.b[5][1]++,role.granular_pay),manager_privileges:(cov_1qb7vetiqt.b[6][0]++,req.body.manager_privileges)||(cov_1qb7vetiqt.b[6][1]++,role.manager_privileges)});cov_1qb7vetiqt.s[43]++;Employee.findByIdAndUpdate(req.params.id,{$push:{roles:newRole}},{new:true,safe:true},(err,employee)=>{cov_1qb7vetiqt.f[12]++;cov_1qb7vetiqt.s[44]++;if(err){cov_1qb7vetiqt.b[7][0]++;cov_1qb7vetiqt.s[45]++;res.status(422).json({error:err});}else{cov_1qb7vetiqt.b[7][1]++;cov_1qb7vetiqt.s[46]++;return res.status(200).json({msg:'Successfully assingned new role',employee:employee});}});});};// DELETE remove an employee by _id
cov_1qb7vetiqt.s[47]++;exports.deleteEmployee=(req,res,next)=>{cov_1qb7vetiqt.f[13]++;cov_1qb7vetiqt.s[48]++;Employee.remove({_id:req.params.id},(err,result)=>{cov_1qb7vetiqt.f[14]++;cov_1qb7vetiqt.s[49]++;if(err){cov_1qb7vetiqt.b[8][0]++;cov_1qb7vetiqt.s[50]++;res.status(422).json({error:err});}else{cov_1qb7vetiqt.b[8][1]++;cov_1qb7vetiqt.s[51]++;return res.status(200).json({result,msg:'Successfully deleted employee'});}});};// GET success route for employee login
cov_1qb7vetiqt.s[52]++;exports.loginSuccess=(req,res)=>{cov_1qb7vetiqt.f[15]++;cov_1qb7vetiqt.s[53]++;return res.status(200).json({msg:'Employee successfully logged in'});};// GET success route for employee login
cov_1qb7vetiqt.s[54]++;exports.loginError=(req,res)=>{cov_1qb7vetiqt.f[16]++;cov_1qb7vetiqt.s[55]++;return res.status(500).json({msg:'Employee login failed'});};// // strategy must come before login POST request
// passport.use(new LocalStrategy({
//   // rename fields
//   // By default, LocalStrategy expects to find credentials in parameters named
//   // username and password. If your site prefers to name these fields differently,
//   // options are available to change the defaults.
//   // passwordField: 'password'
//   usernameField: 'email'
// },
//   function(email, password, done){
//     // 2: working to here so far
//     console.log('hey 2');
//     Employee.find({email: email}, function(err,user){
//       // 4: working here so far
//       console.log('hey 4');
//       if(err) throw err;
//       // if there is no username match
//       if(!user){
//         // 5: working here so far
//         console.log('hey 5 - OR: email not in DB');
//         return done(null, false, {message: 'email not in DB.'});
//       }
//       // continue if there is an employee match
//       console.log('hey 5 - OR: found employee');
//       // user.password is the hashed password from the DB
//       // remember, user is just the session global variable
//       Employee.comparePassword(password, user.password, function(err, isMatch){
//         if(err) throw err;
//         if(isMatch){
//           console.log('hey 7 - OR: passwords match');
//           return done(null, user);
//         } else {
//           console.log('hey 7 - OR: passwords dont match');
//           return done(null, false, {message: 'Incorrect password'});
//         } // BOOM FrickALOOOOOOOOM!!!!! it all works
//
//       });
//     });
//
//   }));
// // serialize and deserialize
// passport.serializeUser(function(user, done){
//   // user is a session variable
//   done(null, user.id);
// });
// passport.deserializeUser(function(id, done){
//   // create this funcgion inside the model
//
//   Employee.getEmployeeById(id, function(err, user){
//     done(err, user);
//   });
// });
// // pass port authentication
// exports.login = (
//   // entering nonnumbers throws error? mongoose model?
//   passport.authenticate('local', {
//     // successRedirect: '/login/login_success',
//     failureRedirect: '/login/login_error', // 1: working to here so far (changed route to test)
//     failureFlash: false
//   }),
//   (req,res) => {
//     // if this function gets called, authentication was Successful
//     // 'req.employee' contains the autenticated user
//     // res.redirect('/');
//     console.log(req.body);
//     res.redirect('/api/login/login_success');
//     // return res.status(200).json({msg: 'Employee successfully logged in'});
//   });